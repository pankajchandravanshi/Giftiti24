@model ProductOverviewModel
<style>
    .wrapperPCcard {
        position: relative;
        max-width: 1130px;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

        .wrapperPCcard .PPCcard {
            position: relative;
            background: #fff;
            border-radius: 3px;
            width: 100%;
            overflow: hidden;
            /*  box-shadow: 4px 4px 10px 0px rgba(0,0,0,0.15);*/
        }

            .wrapperPCcard .PPCcard img {
                width: 100%;
                border-radius: 3px;
                transition: all 0.3s ease;
            }

    .PPCcard:hover img {
        transform: scale(1.1);
    }

    .wrapperPCcard .PPCcard .PPcontent {
        position: absolute;
        width: 100%;
        bottom: -50%;
        background: #028e8b;
        padding: 10px 20px 22px 20px;
        box-shadow: 0px -3px 10px 0px rgba(0,0,0,0.15);
        transition: all 0.3s ease;
    }

    .wrapperPCcard .PPCcard:hover .PPcontent {
        bottom: 0;
    }

    .PPCcard .PPcontent .row,
    .PPcontent .buttons {
        display: flex;
        justify-content: space-between;
    }

    .PPcontent .row .details span {
        font-size: 22px;
        font-weight: 500;
    }

    .PPcontent .row .details p {
        color: #333;
        font-size: 17px;
        font-weight: 400;
    }

    .styled-button {
        background-color: #028e8b;
        color: white;
        padding: 10px 20px;
        border: 1px solid white !important; /* White border */
        border-radius: 4px;
        font-size: 16px;
        cursor: pointer;
    }

        .styled-button:hover {
            background-color: #028e8b;
        }
</style>

@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax

@inject CatalogSettings catalogSettings
@inject IWorkContext workContext


@{
    //prepare "Add to cart" AJAX link
    var addtocartlink = "";
    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var quantity = 1;
    if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity, forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart });
    }
    else
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity });
    }

    var addtowishlistlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist, quantity = quantity });
    var addtocomparelink = Url.RouteUrl("AddProductToCompare", new { productId = Model.Id });
}
<div class="product-item" style=" border: 1px solid #d9d5d5;" data-productid="@Model.Id">


    <div class="wrapperPCcard">

        @if (Model.PictureModels.Count > 1)
        {
            <div class="swiper" id="swiper-@Model.Id" dir="@Html.GetUIDirection(!await Html.ShouldUseRtlThemeAsync())">
                <div class="swiper-wrapper">
                    @foreach (var picture in Model.PictureModels)
                    {
                        <a class="swiper-slide" href="@(Url.RouteUrl<Product>(new { SeName = Model.SeName }))" title="@picture.Title">
                            <img alt="@picture.AlternateText" src="@picture.ImageUrl" title="@picture.Title" />
                        </a>
                    }
                </div>
                <!-- Add Pagination -->
                <div class="swiper-pagination"></div>
            </div>

            <script asp-location="Footer">
                new Swiper('#swiper-@(Model.Id)', {
                    pagination: {
                        clickable: true,
                        el: '.swiper-pagination',
                    },
                });
            </script>
        }
        else
        {
            var picture = Model.PictureModels.FirstOrDefault();
            <div class="PPCcard">
                <a href="@(Url.RouteUrl<Product>(new { SeName = Model.SeName }))" title="@picture?.Title">
                    <img alt="@picture?.AlternateText" src="@picture?.ImageUrl" title="@picture?.Title" />
                </a>
                <div class="PPcontent">
                    <div class="Addcartbuttons">
                        <div class="buttons">
                            @if (!Model.ProductPrice.DisableBuyButton)
                            {
                                var addToCartText = "Add to cart";
                                if (Model.ProductPrice.IsRental)
                                {
                                    addToCartText = T("ShoppingCart.Rent").Text;
                                }
                                if (Model.ProductPrice.AvailableForPreOrder)
                                {
                                    addToCartText = T("ShoppingCart.PreOrder").Text;
                                }
                                <button type="button" title="@T("ShoppingCart.AddToCart")" class="styled-button" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink');return false;">@(addToCartText)</button>
                            }
                            @if (!Model.ProductPrice.DisableAddToCompareListButton)
                            {
                                <button type="button" title="@T("ShoppingCart.AddToCompareList")" class="button-2 btn btn-default add-to-compare-list-button" onclick="AjaxCart.addproducttocomparelist('@addtocomparelink');return false;">@T("ShoppingCart.AddToCompareList")</button>
                            }
                            @if (!Model.ProductPrice.DisableWishlistButton)
                            {
                                <button type="button" title="@T("ShoppingCart.AddToWishlist")" class="button-2 btn btn-default add-to-wishlist-button" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink');return false;">@T("ShoppingCart.AddToWishlist")</button>
                            }
                        </div>
                    </div>
                </div>
            </div>
            @*   <a href="@(Url.RouteUrl<Product>(new { SeName = Model.SeName }))" title="@picture?.Title">
        <img alt="@picture?.AlternateText" src="@picture?.ImageUrl" title="@picture?.Title" />
        </a>*@
        }
    </div>
    <div class="details">
        <h3 class="product-title">
            <a href="@(Url.RouteUrl<Product>(new {SeName = Model.SeName }))">@Model.Name</a>
        </h3>
        <div class="prices">
            <span class="price actual-price">@Model.ProductPrice.Price</span>
            @if (!string.IsNullOrEmpty(Model.ProductPrice.OldPrice))
            {
                <span class="price old-price">@Model.ProductPrice.OldPrice</span>
            }
             @if (!string.IsNullOrEmpty(Model.ProductPrice.OldPrice))
            {
                
            <div>
                (You save<span class="price"style="
    color: #028e8b;
    font-size: 17px;
"> @Model.ProductPrice.Price</span>)
            </div>
            }

            @*@if (Model.ProductPrice.DisplayTaxShippingInfo)
            {
                var inclTax = await workContext.GetTaxDisplayTypeAsync() == TaxDisplayType.IncludingTax;
                //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                //of course, you can modify appropriate locales to include VAT info there
                <span class="tax-shipping-info">
                    @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteTopicUrl("shippinginfo"))
                </span>
            }*@

            @if (!string.IsNullOrEmpty(Model.ProductPrice.BasePricePAngV))
            {
                <div class="base-price-pangv">
                    @Model.ProductPrice.BasePricePAngV
                </div>
            }
        </div>
       
        @if (Model.ReviewOverviewModel.AllowCustomerReviews)
        {
            var ratingPercent = 0;
            if (Model.ReviewOverviewModel.TotalReviews != 0)
            {
                ratingPercent = ((Model.ReviewOverviewModel.RatingSum * 100) / Model.ReviewOverviewModel.TotalReviews) / 5;
            }
            <div class="product-rating-box" title="@string.Format(T("Reviews.TotalReviews").Text, Model.ReviewOverviewModel.TotalReviews)">
                    Rating
                <div class="rating">
                    <div style="width: @(ratingPercent)%">
                       
                    </div>
                    
                </div>
               
            </div>
        }
        @if (!string.IsNullOrEmpty(Model.Sku))
        {
            <span class="sku">
                @Model.Sku item left.
            </span>
        }
        @if (!string.IsNullOrEmpty(Model.Stockquantity))
        {
            <span class="sku">
                @Model.Stockquantity item left.
            </span>
        }
        <div class="description" @(catalogSettings.ShowShortDescriptionOnCatalogPages ? "" : "data-short-description=none")>
            @Html.Raw(Model.ShortDescription)
        </div>
        <div class="add-info">
            @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductBoxAddinfoBefore, additionalData = Model })
           
            @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductBoxAddinfoMiddle, additionalData = Model })
            @*<div class="buttons">
            @if (!Model.ProductPrice.DisableBuyButton)
            {
            var addToCartText = "Add to cart";
            if (Model.ProductPrice.IsRental)
            {
            addToCartText = T("ShoppingCart.Rent").Text;
            }
            if (Model.ProductPrice.AvailableForPreOrder)
            {
            addToCartText = T("ShoppingCart.PreOrder").Text;
            }
            <button type="button" class="button-2 btn btn-primary product-box-add-to-cart-button" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink');return false;">@(addToCartText)</button>
            }
            @if (!Model.ProductPrice.DisableAddToCompareListButton)
            {
            <button type="button" title="@T("ShoppingCart.AddToCompareList")" class="button-2 btn btn-default add-to-compare-list-button" onclick="AjaxCart.addproducttocomparelist('@addtocomparelink');return false;">@T("ShoppingCart.AddToCompareList")</button>
            }
            @if (!Model.ProductPrice.DisableWishlistButton)
            {
            <button type="button" title="@T("ShoppingCart.AddToWishlist")" class="button-2 btn btn-default add-to-wishlist-button" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink');return false;">@T("ShoppingCart.AddToWishlist")</button>
            }
            </div>*@
            @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.ProductBoxAddinfoAfter, additionalData = Model })
        </div>
    </div>
</div>
