@*@model MiniShoppingCartModel

@using Nop.Core.Domain.Catalog

<div id="flyout-cart" class="flyout-cart">
    <div class="container">
    <div class="mini-shopping-cart row">
        <div class="count">
            @if (Model.TotalProducts == 0)
            {
                @T("ShoppingCart.Mini.NoItems")
            }
            else
            {
                @Html.Raw(string.Format(T("ShoppingCart.Mini.ItemsText").Text, $"<a href=\"{Url.RouteUrl("ShoppingCart")}\">{string.Format(T("ShoppingCart.Mini.Items").Text, Model.TotalProducts)}</a>"))
            }
        </div>
        @if (Model.TotalProducts > 0)
        {
            <div class="items">
                @for (var i = 0; i < Model.Items.Count; i++)
                {
                    var item = Model.Items[i];
                    <div class="item @(i == 0 ? "first" : null)">
                        @if (Model.ShowProductImages)
                        {
                            <div class="picture">
                                <a href="@(Url.RouteUrl<Product>(new { SeName = item.ProductSeName }))" title="@item.Picture.Title">
                                    <img alt="@item.Picture.AlternateText" src="@item.Picture.ImageUrl" title="@item.Picture.Title" />
                                </a>
                            </div>
                        }
                        <div class="product">
                            <div class="name">
                                <a href="@(Url.RouteUrl<Product>(new { SeName = item.ProductSeName }))">@item.ProductName</a>
                            </div>
                            @if (!string.IsNullOrEmpty(item.AttributeInfo))
                            {
                                <div class="attributes">
                                    @Html.Raw(item.AttributeInfo)
                                </div>
                            }
                            <div class="price">@T("ShoppingCart.Mini.UnitPrice"): <span>@item.UnitPrice</span></div>
                            <div class="quantity">@T("ShoppingCart.Mini.Quantity"): <span>@item.Quantity</span></div>
                        </div>
                    </div>
                }
            </div>
            <div class="totals">@T("ShoppingCart.Totals.SubTotal"): <strong>@Model.SubTotal</strong></div>
            <div class="buttons">
                @if (Model.DisplayShoppingCartButton)
                {
                    <button type="button" class="button-2 btn btn-primary cart-button" onclick="setLocation('@(Url.RouteUrl("ShoppingCart"))')">@T("ShoppingCart.Mini.ViewCart")</button>
                    
                }
                @if (Model.DisplayCheckoutButton)
                {
                    var checkoutUrl = "";
                    if (Model.AnonymousCheckoutAllowed && Model.CurrentCustomerIsGuest)
                    {
                        checkoutUrl = Url.RouteUrl("LoginCheckoutAsGuest", new { returnUrl = Url.RouteUrl("ShoppingCart") });
                    }
                    else
                    {
                        checkoutUrl = Url.RouteUrl("Checkout");
                    }
                    <button type="button" class="button-2 btn btn-primary checkout-button" onclick="setLocation('@checkoutUrl')">@T("Checkout.Button")</button>
                }
            </div>
        }
    </div>
    </div>
</div>*@
@model MiniShoppingCartModel

@using Nop.Core.Domain.Catalog


<div id="cd-cart">

    <h2>Cart</h2>

    @if (Model.TotalProducts > 0)
    {








        <ul class="cd-cart-items">
            @for (var i = 0; i < Model.Items.Count; i++)
            {
                var item = Model.Items[i];

                <li class="list-group-item">
                    <div class="row align-items-center">
                        @if (Model.ShowProductImages)
                        {
                            <div class="col-4">
                                <a href="@(Url.RouteUrl<Product>(new { SeName = item.ProductSeName }))" title="@item.Picture.Title">
                                    <img class="img-fluid" alt="@item.Picture.AlternateText" src="@item.Picture.ImageUrl" title="@item.Picture.Title" />
                                </a>
                            </div>
                        }

                        <div class="col-8">
                            <p class="font-size-sm font-weight-bold mb-0">
                                <a href="@(Url.RouteUrl<Product>(new { SeName = item.ProductSeName }))">@item.ProductName</a>

                                @if (!string.IsNullOrEmpty(item.AttributeInfo))
                                {
                                    <div class="attributes">
                                        @Html.Raw(item.AttributeInfo)
                                    </div>
                                }
                                <br>
                                <span class="text-body">@item.UnitPrice</span>&nbsp;
                                @*<span class="font-size-xs text-gray-350 text-decoration-line-through mr-2 ng-star-inserted"> @item.UnitPrice </span>*@
                            </p>
                            <p class="mb-2 font-size-sm text-muted">
                                <!----><!---->
                            </p>
                            <div class="d-flex align-items-center">
                                <div>
                                    <div class="input-group">
                                        <div class="input-group-prepend"><button class="btn btn-secondary btn-xs rounded-0" id="minus-btn"><i class="fa fa-minus"></i></button></div>
                                        <input class="form-control form-control-xs rounded-0 ng-untouched ng-pristine ng-valid" id="item_qty" type="number" value="@item.Quantity">
                                        <div class="input-group-prepend"><button class="btn btn-secondary btn-xs  rounded-0" id="plus-btn"><i class="fa fa-plus"></i></button></div>
                                    </div>
                                </div>
                                <a class="btn btn-danger btn-xxs px-2 py-0 text-white font-size-xs ml-auto rounded-0 removeCartItems" href="javascript:void(0)">
                                    <i class="fe fe-x"></i> Remove
                                </a>
                            </div>
                        </div>




                    </div>
                </li>



            }

        </ul> <!-- cd-cart-items -->

        <div class="cd-cart-total">
            <p>Total <span>@Model.SubTotal</span></p>
        </div> <!-- cd-cart-total -->
        @*@if (Model.DisplayCheckoutButton)*@
        {
            var checkoutUrl = "";
            if (Model.AnonymousCheckoutAllowed && Model.CurrentCustomerIsGuest)
            {
                checkoutUrl = Url.RouteUrl("LoginCheckoutAsGuest", new { returnUrl = Url.RouteUrl("ShoppingCart") });
            }
            else
            {
                checkoutUrl = Url.RouteUrl("Checkout");
            }
            <button type="button" class="checkout-btn checkout-button" onclick="setLocation('@checkoutUrl')">@T("Checkout.Button")</button>
        }

    }
    <p class="cd-go-to-cart"><a href="#0">Go to cart page</a></p>
</div>


<div id="flyout-cart" class="flyout-cart">

    <div class="container">
        <div class="mini-shopping-cart row">
            <div class="count">
                @if (Model.TotalProducts == 0)
                {
                    @T("ShoppingCart.Mini.NoItems")
                }
                else
                {
                    @Html.Raw(string.Format(T("ShoppingCart.Mini.ItemsText").Text, $"<a href=\"{Url.RouteUrl("ShoppingCart")}\">{string.Format(T("ShoppingCart.Mini.Items").Text, Model.TotalProducts)}</a>"))
                }
            </div>
            @if (Model.TotalProducts > 0)
            {
                <div class="items">
                    @for (var i = 0; i < Model.Items.Count; i++)
                    {
                        var item = Model.Items[i];
                        <div class="item @(i == 0 ? "first" : null)">
                            @if (Model.ShowProductImages)
                            {
                                <div class="picture">
                                    <a href="@(Url.RouteUrl<Product>(new { SeName = item.ProductSeName }))" title="@item.Picture.Title">
                                        <img alt="@item.Picture.AlternateText" src="@item.Picture.ImageUrl" title="@item.Picture.Title" />
                                    </a>
                                </div>
                            }
                            <div class="product">
                                <div class="name">
                                    <a href="@(Url.RouteUrl<Product>(new { SeName = item.ProductSeName }))">@item.ProductName</a>
                                </div>
                                @if (!string.IsNullOrEmpty(item.AttributeInfo))
                                {
                                    <div class="attributes">
                                        @Html.Raw(item.AttributeInfo)
                                    </div>
                                }
                                <div class="price">@T("ShoppingCart.Mini.UnitPrice"): <span>@item.UnitPrice</span></div>
                                <div class="quantity">@T("ShoppingCart.Mini.Quantity"): <span>@item.Quantity</span></div>
                            </div>
                        </div>
                    }
                </div>
                <div class="totals">@T("ShoppingCart.Totals.SubTotal"): <strong>@Model.SubTotal</strong></div>
                <div class="buttons">
                    @if (Model.DisplayShoppingCartButton)
                    {
                        <button type="button" class="button-2 btn btn-primary cart-button" onclick="setLocation('@(Url.RouteUrl("ShoppingCart"))')">@T("ShoppingCart.Mini.ViewCart")</button>

                    }
                    @if (Model.DisplayCheckoutButton)
                    {
                        var checkoutUrl = "";
                        if (Model.AnonymousCheckoutAllowed && Model.CurrentCustomerIsGuest)
                        {
                            checkoutUrl = Url.RouteUrl("LoginCheckoutAsGuest", new { returnUrl = Url.RouteUrl("ShoppingCart") });
                        }
                        else
                        {
                            checkoutUrl = Url.RouteUrl("Checkout");
                        }
                        <button type="button" class="button-2 btn btn-primary checkout-button" onclick="setLocation('@checkoutUrl')">@T("Checkout.Button")</button>
                    }
                </div>
            }
        </div>
    </div>
</div>

